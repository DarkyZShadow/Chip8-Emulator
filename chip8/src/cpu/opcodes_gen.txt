const input = `
** 00E0 	CLS
** 00EE 	RET
** 0NNN 	SYS addr
** 1NNN 	JP addr
** 2NNN 	CALL addr
** 3XNN 	SE Vx, byte
** 4XNN 	SNE Vx, byte
** 5XY0 	SE Vx, Vy
** 6XNN 	LD Vx, byte
** 7XNN 	ADD Vx, byte
** 8XY0 	LD Vx, Vy
** 8XY1 	OR Vx, Vy
** 8XY2 	AND Vx, Vy
** 8XY3 	XOR Vx, Vy
** 8XY4 	ADD Vx, Vy
** 8XY5 	SUB Vx, Vy
** 8XY6 	SHR Vx {, Vy}
** 8XY7 	SUBN Vx, Vy
** 8XYE 	SHL Vx {, Vy}
** 9XY0 	SNE Vx, Vy
** ANNN 	LD I, addr
** BNNN 	JP V0, addr
** CXNN 	RND Vx, byte
** DXYN 	DRW Vx, Vy, nibble
** EX9E 	SKP Vx
** EXA1 	SKNP Vx
** FX07 	LD Vx, DT
** FX0A 	LD Vx, K
** FX15 	LD DT, Vx
** FX18 	LD ST, Vx
** FX1E 	ADD I, Vx
** FX29 	LD F, Vx
** FX33 	LD B, Vx
** FX55 	LD [I], Vx
** FX65 	LD Vx, [I]
** 00Cn     SCD nibble
** 00FB     SCR
** 00FC     SCL
** 00FD     EXIT
** 00FE     LOW
** 00FF     HIGH
** Dxy0     DRW Vx, Vy, 0
** Fx30     LD HF, Vx
** Fx75     LD R, Vx
** Fx85     LD Vx, R
`;
const regex = /(\w{4})\s+(.+)/gmi;
const lines = input.split('\n');
const chars = '0123456789ABCDEF';
let output;
let m;

output = `const opcodes:IOpcode[] = [\n`;

while ((m = regex.exec(input)) !== null) {
    if (m.index === regex.lastIndex)
        regex.lastIndex++;

    const [ _, opcode, name ] = m;
    let mask = 0xF000;
    let id = Number.parseInt(opcode[0], 16) << 12;

    if (chars.includes(opcode[1].toUpperCase()))
    {
    	id += (Number.parseInt(opcode[1], 16) << 8);
      mask += 0x0F00;
    }

    if (chars.includes(opcode[2].toUpperCase()))
    {
    	id += (Number.parseInt(opcode[2], 16) << 4);
      mask += 0x00F0;
    }

    if (chars.includes(opcode[3].toUpperCase()))
    {
    	id += Number.parseInt(opcode[3], 16);
      mask += 0x000F;
    }

    output += `\t/* ${name} */\n\t{\n`
    	+ `\t\tmask: 0x${mask.toString(16).toUpperCase().padStart(4, '0')},\n`
    	+ `\t\tid: 0x${id.toString(16).toUpperCase().padStart(4, '0')},\n`
    	+ `\t\tfn() { }\n`
      + `\t},\n`
}

output += '];';

console.log(output);
